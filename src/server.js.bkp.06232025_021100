require('dotenv').config();
const express = require('express');
const cors = require('cors');
const cookieParser = require('cookie-parser');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const winston = require('winston');
const path = require('path');

// Import routes
const authRoutes = require('./routes/auth');
const sessionRoutes = require('./routes/session');
const userRoutes = require('./routes/user');
const oauthRoutes = require('./routes/oauth');

// Import middleware
const { errorHandler } = require('./middleware/errorHandler');
const { requestLogger } = require('./middleware/requestLogger');

// Create Express app
const app = express();
const PORT = process.env.PORT || 4000;

// Trust proxy - required for nginx reverse proxy and rate limiting
app.set('trust proxy', true);

// Configure logger
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.errors({ stack: true }),
    winston.format.splat(),
    winston.format.json()
  ),
  defaultMeta: { service: 'auth-service' },
  transports: [
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' }),
    new winston.transports.Console({
      format: winston.format.combine(
        winston.format.colorize(),
        winston.format.simple()
      )
    })
  ]
});

// CORS configuration
const corsOptions = {
  origin: function (origin, callback) {
    // Allow requests from GenoBank domains and whitelisted partners
    const allowedPatterns = [
      /^https?:\/\/([a-z0-9-]+\.)?genobank\.app$/,
      /^https?:\/\/([a-z0-9-]+\.)?nvlope\.io$/,
      /^https?:\/\/localhost(:\d+)?$/
    ];
    
    if (!origin || allowedPatterns.some(pattern => pattern.test(origin))) {
      callback(null, true);
    } else {
      callback(new Error('Not allowed by CORS'));
    }
  },
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
  exposedHeaders: ['X-Auth-Token'],
  maxAge: 86400 // 24 hours
};

// Rate limiting
const limiter = rateLimit({
  windowMs: 1 * 60 * 1000, // 1 minute
  max: 10, // 10 requests per minute for auth endpoints
  message: 'Too many authentication attempts, please try again later',
  standardHeaders: true,
  legacyHeaders: false,
});

const apiLimiter = rateLimit({
  windowMs: 1 * 60 * 1000, // 1 minute
  max: 100, // 100 requests per minute for API endpoints
  message: 'Too many requests, please try again later',
  standardHeaders: true,
  legacyHeaders: false,
});

// Middleware
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'", "https://cdn.jsdelivr.net"],
      scriptSrc: ["'self'", "'unsafe-inline'", "https://cdn.jsdelivr.net", "https://auth.magic.link"],
      imgSrc: ["'self'", "data:", "https:"],
      connectSrc: ["'self'", "https://api.genobank.app", "wss:", "https:"],
      fontSrc: ["'self'", "https://cdn.jsdelivr.net"],
      objectSrc: ["'none'"],
      mediaSrc: ["'self'"],
      frameSrc: ["'self'", "https://auth.magic.link"],
    },
  },
  crossOriginEmbedderPolicy: false
}));

app.use(cors(corsOptions));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());
app.use(requestLogger);

// Serve static files
app.use(express.static(path.join(__dirname, '../public')));

// Routes
app.use('/api/v1/auth', limiter, authRoutes);
app.use('/api/v1/session', apiLimiter, sessionRoutes);
app.use('/api/v1/user', apiLimiter, userRoutes);

// Also expose routes under /auth/ for compatibility
app.use('/auth', limiter, authRoutes);
app.use('/auth/session', apiLimiter, sessionRoutes);
app.use('/auth/user', apiLimiter, userRoutes);
app.use('/auth/oauth', limiter, oauthRoutes);

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    service: 'auth-service',
    version: '1.0.0',
    timestamp: new Date().toISOString()
  });
});

// Debug endpoint to check headers
app.get('/debug-headers', (req, res) => {
  res.json({
    headers: req.headers,
    protocol: req.protocol,
    secure: req.secure,
    ip: req.ip,
    hostname: req.hostname,
    url: req.url,
    originalUrl: req.originalUrl
  });
});

// Root endpoint - serve login page
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, '../public/index.html'));
});

// OAuth callback pages
app.get('/oauth/callback', (req, res) => {
  res.sendFile(path.join(__dirname, '../public/oauth-callback.html'));
});

// Error handling
app.use(errorHandler);

// 404 handler
app.use((req, res) => {
  res.status(404).json({
    error: 'Not Found',
    message: 'The requested resource was not found'
  });
});

// Start server
app.listen(PORT, () => {
  logger.info(`GenoBank Auth Service running on port ${PORT}`);
  console.log(`🔐 GenoBank Auth Service running on http://localhost:${PORT}`);
});

// Handle graceful shutdown
process.on('SIGTERM', () => {
  logger.info('SIGTERM signal received: closing HTTP server');
  app.close(() => {
    logger.info('HTTP server closed');
  });
});

module.exports = app;